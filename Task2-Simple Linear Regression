# Import libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load the Housing Dataset
data = pd.read_csv("C:/Users/ASUS/OneDrive/Desktop/INTERNSHIP/Housing.csv")

# Preview the dataset
data.head()

# Data information
data.info()

# Preview the dataset
data.tail()

# Scatter plot 
plt.figure(figsize=(8,6))
sns.scatterplot(data=data, x='RM',y='MEDV')
plt.title('Number of rooms vs Median home value')
plt.show()

x=data[['RM']] # Independent variable (number of rooms)
y=data['MEDV'] # Target variable (median house value)

# Split the data (80% training, 20% testing)
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# Check the shape of the training and testing sets
x_train.shape, x_test.shape

# Create the linear regression model
model = LinearRegression()

# Train the model
model.fit(x_train, y_train)

# Get the slope (coefficient) and intercept
print(f"Coefficient (slope): {model.coef_[0]}")
print(f"Intercept: {model.intercept_}")

# Predict on the test set
y_pred = model.predict(x_test)
predictions = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
predictions.head(10)

# Calculate Mean Squared Error (MSE)
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")

# Calculate R-squared
r2 = r2_score(y_test, y_pred)
print(f"R-squared: {r2}")

# Plot the regression line 
plt.figure(figsize=(8, 6))
plt.scatter(x_train, y_train, color='blue', label='Training Data')
plt.plot(x_train, model.predict(x_train), color='red', label='Regression Line')
plt.title('Linear Regression: Number of Rooms vs Median Home Value')
plt.xlabel('Number of Rooms (RM)')
plt.ylabel('Median Home Value (MEDV)')
plt.legend()
plt.show()

# Plot actual vs predicted values
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='green')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', lw=2)  
plt.title('Actual vs Predicted Values')
plt.xlabel('Actual MEDV')
plt.ylabel('Predicted MEDV')
plt.show()
